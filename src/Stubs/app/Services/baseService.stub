<?php

$NAMESPACE$

use $PROJETO$\Enums\PlatformEnum;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Prettus\Validator\Contracts\ValidatorInterface;
use Prettus\Validator\Exceptions\ValidatorException;


/**
 * Class BaseService
 * @package $NAMESPACE$
 */
class BaseService
{
    protected $platform = '';

    public function listar($colunaOrdenacao = '', $posicaoOrdenacao = 'desc', $qtdRegistros = 6)
        {
            try {

                if($colunaOrdenacao == '') {
                    return $this->repository->paginate($qtdRegistros);
                }

                return $this->repository->orderBy($colunaOrdenacao, $posicaoOrdenacao)->paginate($qtdRegistros);

            } catch (ValidatorException $e) {
                return [
                    'error' => true,
                    'message' => $e->getMessageBag()
                ];
            }
        }

        public function detalharPorId($id)
        {
            try {
                $this->validator->setRules(['id_entidade' => 'required|integer'])->with(['id_entidade' => $id])->passesOrFail();
                $retorno = $this->repository->skipCriteria()->find($id);
                if(!$retorno){
                    return [
                        'error' => true,
                        'message' => "Id não encontrado"
                    ];
                }
                return $retorno;

            } catch (ValidatorException $e) {
                return [
                    'error' => true,
                    'message' => $e->getMessageBag()
                ];
            } catch (ModelNotFoundException $e) {
                return [
                    'error' => true,
                    'message' => "Id não encontrado."
                ];
            }
        }

        public function criar(array $data, $flgRuleCreate=false)
        {
            try {
                if($flgRuleCreate) {
                    $this->validator->setRules($this->rulesPadrao)->with($data)->passesOrFail(ValidatorInterface::RULE_CREATE);
                } else {
                    $this->validator->setRules($this->rulesPadrao)->with($data)->passesOrFail();
                }

                $data = $this->transformaDadosParaUtilizarNoSql($data);

                return $this->repository->create($data);

            } catch (ValidatorException $e) {
                return [
                    'error' => true,
                    'message' => $e->getMessageBag()
                ];
            }
        }

        public function atualizar(array $data, $id, $flgRuleUpdate=false)
        {
            try {

                if($flgRuleUpdate) {
                    $this->validator->setId($id)->setRules($this->rulesPadrao)->with($data)->passesOrFail(ValidatorInterface::RULE_UPDATE);
                } else {
                    $this->validator->setId($id)->setRules($this->rulesPadrao)->with($data)->passesOrFail();
                }

                $data = $this->transformaDadosParaUtilizarNoSql($data);

                return $this->repository->update($data, $id);

            } catch (ValidatorException $e) {
                return [
                    'error' => true,
                    'message' => $e->getMessageBag()
                ];
            }
        }

        public function excluir($id)
        {
            try {
                $this->validator->setRules(['id_entidade' => 'required|integer'])->with(['id_entidade' => $id])->passesOrFail();

                if ($this->repository->delete($id)) {
                    return 'true';
                } else {
                    return 'false';
                }

            } catch (ValidatorException $e) {
                return [
                    'error' => true,
                    'message' => $e->getMessageBag()
                ];
            }
        }

        /**
         *
         * @param array $where ["ID_CAMPO"=>$campo] / [["OR","ID_CAMPO",$campo], ["AND","ID_CAMPO",$campo]]
         * @return array
         */
        public function excluirWhere(array $where)
        {
            try {
                $this->validator->setRules(['where' => 'required|array'])->with(['where' => $where])->passesOrFail();
                return $this->repository->deleteWithCondition($where);

            } catch (ValidatorException $e) {
                return [
                    'error' => true,
                    'message' => $e->getMessageBag()
                ];
            }
        }

        protected function transformaDadosParaUtilizarNoSql($data)
        {
            $colunas = array_keys($data);
            foreach ($colunas as $coluna) {
                //transforma campos que comecam com data_ do formato d/m/Y para Y-m-d
                if ((substr($coluna, 0, 4) == 'dat_') || (substr($coluna, 0, 5) == 'data_')) {

                    if(strlen($data[$coluna]) > 10){
                        $data[$coluna] = dateTimeSQL($data[$coluna]);
                    }else{
                        $data[$coluna] = dateSQL($data[$coluna]);
                    }
                }
                //encripta o password
                if (substr($coluna, 0, 8) == 'password') {
                    $data[$coluna] = bcrypt($data[$coluna]);
                }
            }
            return $data;
        }

        /**
         *
         */
        public function setPresenter()
        {
            if($this->platform == PlatformEnum::Mobile['value']){
                $presenter = $this->repository->makePresenter($this->repository->presenter());
                $presenter->setMobileTransformer();
                $this->repository->setPresenter($presenter);
            }

            return $this;
        }


        /**
         * @param $platform
         * @param bool $flgSetPresenter
         * @return $this
         */
        public function setPlatform($platform, $flgSetPresenter = false)
        {
            $this->platform = $platform;
            if($flgSetPresenter){
                $this->setPresenter();
            }
            return $this;
        }

        /**
         * @return string
         */
        public function getPlatform()
        {
            return $this->platform;
        }

}
