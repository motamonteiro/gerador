<?php

$NAMESPACE$

use $PROJETO$\Helpers\Helper;
use $PROJETO$\Helpers\Traits\MsgTrait;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\ValidationException;


/**
 * Class BaseService
 * @package $NAMESPACE$
 */
class BaseService
{
    use MsgTrait;

    const ID_ENTIDADE = 'idEntidade';

    public function helper()
    {
        return new Helper();
    }

    public function listar($colunaOrdenacao = '', $posicaoOrdenacao = '', $qtdRegistros = 10, $colunasSelect = ['*'])
    {
        $resultado = ($colunaOrdenacao == '') ? $this->repository->paginate($qtdRegistros, $colunasSelect) : $this->repository->orderBy($colunaOrdenacao, $posicaoOrdenacao)->paginate($qtdRegistros, $colunasSelect);
        return $this->retornarResultado($resultado, true, true);
    }

    public function detalharPorId($id, $colunasSelect = ['*'])
    {
        try {
            $this->aplicarRegrasThrow([self::ID_ENTIDADE => $id], [self::ID_ENTIDADE => 'required|integer']);
            $resultado = $this->repository->skipCriteria()->find($id, $colunasSelect);
            return ($resultado) ? $this->retornarResultado($resultado, false, true) : $this->retornarMsgErro('Id não encontrado');

        } catch (ModelNotFoundException $e) {
            return $this->retornarMsgErro('Id '.$id.' não encontrado ao tentar detalhar');
        } catch (ValidationException $e) {
            return $this->retornarMsgErro($e->validator);
        } catch (\Exception $e) {
            return $this->retornarMsgErro($e->getMessage());
        }
    }

    public function criar(array $dados)
    {
        try{
            $this->aplicarRegrasThrow($dados, $this->repository->rules(), $this->repository->labels());
            $dados = $this->camposFormatoSql($dados, false);
            $resultado = $this->repository->create($dados);
            return $this->retornarResultado($resultado, false, true);
        } catch (ValidationException $e) {
            return $this->retornarMsgErro($e->validator);
        } catch (\Exception $e) {
            return $this->retornarMsgErro($e->getMessage());
        }
    }

    public function atualizar(array $dados, $id)
    {
        try{
            $this->aplicarRegrasThrow($dados, $this->repository->rules($id), $this->repository->labels());
            $dados = $this->camposFormatoSql($dados, false);
            $resultado = $this->repository->update($dados, $id);
            return $this->retornarResultado($resultado, false, true);
        } catch (ModelNotFoundException $e) {
            return $this->retornarMsgErro('Id '.$id.' não encontrado ao tentar atualizar');
        } catch (ValidationException $e) {
            return $this->retornarMsgErro($e->validator);
        } catch (\Exception $e) {
            return $this->retornarMsgErro($e->getMessage());
        }
    }

    public function excluir($id)
    {
        try {
            $this->aplicarRegrasThrow([self::ID_ENTIDADE => $id], [self::ID_ENTIDADE => 'required|integer']);
            return ($this->repository->delete($id)) ? $this->retornarMsgSucesso('Registro excluído com sucesso') : $this->retornarMsgErro('Erro ao excluir registro');
        } catch (ModelNotFoundException $e) {
            return $this->retornarMsgErro('Id '.$id.' não encontrado ao tentar excluir');
        } catch (ValidationException $e) {
            return $this->retornarMsgErro($e->validator);
        } catch (\Exception $e) {
            return $this->retornarMsgErro($e->getMessage());
        }
    }

    public function aplicarRegras($campos = [], $regras = [], $nomeCampos = [], $flgCamposCamelCase = true, $flgTrowValidationException = false)
    {
        $regras = ($flgCamposCamelCase) ? $this->camelCaseArrayKeys($regras) : $this->snakeCaseArrayKeys($regras);
        $nomeCampos = ($flgCamposCamelCase) ? $this->camelCaseArrayKeys($nomeCampos) : $this->snakeCaseArrayKeys($nomeCampos);

        $validator = Validator::make($campos, $regras);

        if (!empty($nomeCampos)) {
            $validator->setAttributeNames($nomeCampos);
        }

        if ($validator->fails()) {
            if ($flgTrowValidationException) {
                throw new ValidationException($validator->messages());
            } else {
                return $this->retornarMsgErro($validator->messages());
            }
        }
        return $campos;
    }

    public function aplicarRegrasThrow ($campos = [], $regras = [], $nomeCampos = [], $flgCamposCamelCase = true)
    {
        return $this->aplicarRegras($campos, $regras, $nomeCampos, $flgCamposCamelCase, true);
    }

    public function snakeCaseArrayKeys(array $campos)
    {
        $keys = array_keys($campos);
        foreach ($keys as $key) {
            $snakeCaseKey = snake_case($key);
            if ($snakeCaseKey != $key) {
                $campos[$snakeCaseKey] = $campos[$key];
                unset($campos[$key]);
            }
        }
        return $campos;
    }

    public function camelCaseArrayKeys(array $campos)
    {
        $keys = array_keys($campos);
        foreach ($keys as $key) {
            $camelCaseKey = camel_case($key);
            if ($camelCaseKey != $key) {
                $campos[$camelCaseKey] = $campos[$key];
                unset($campos[$key]);
            }
        }
        return $campos;
    }

    public function camposFormatoBr($campos, $flgCamposCamelCase = true, $flgVlrMoeda = true)
    {
        $colunas = array_keys($campos);
        foreach ($colunas as $coluna) {

            //transforma campos de data
            if (substr($coluna, 0, 3) == 'dat') {
                if (strlen($campos[$coluna]) > 10) {
                    if (substr($campos[$coluna], 4, 1) == '-') {
                        $campos[$coluna] = $this->helper()->dataHoraFormatoSqlParaBr($campos[$coluna]);
                    }
                } elseif ($campos[$coluna] != "") {
                    if (substr($campos[$coluna], 4, 1) == '-') {
                        if (strlen($campos[$coluna]) == 7) {
                            $campos[$coluna] = $this->helper()->dataFormatoOrigemDestino($campos[$coluna], 'Y-m', 'm/Y');
                        } else {
                            $campos[$coluna] = $this->helper()->dataFormatoSqlParaBr($campos[$coluna]);
                        }
                    }
                }
            }

            //transforma campos de valores
            if (substr($coluna, 0, 3) == 'vlr') {
                $campos[$coluna] = ($flgVlrMoeda) ? $this->helper()->numeroFormatoSqlParaMoedaBr($campos[$coluna]) : $this->helper()->numeroFormatoSqlParaBr($campos[$coluna]);
            }
        }

        return ($flgCamposCamelCase) ? $this->camelCaseArrayKeys($campos) : $this->snakeCaseArrayKeys($campos);
    }

    public function camposFormatoSql(array $campos, $flgCamposCamelCase = true)
    {
        $colunas = array_keys($campos);
        foreach ($colunas as $coluna) {

            //transforma campos de data
            if (substr($coluna, 0, 3) == 'dat') {
                if (strlen($campos[$coluna]) > 10) {
                    if (substr($campos[$coluna], 2, 1) == '/') {
                        $campos[$coluna] = $this->helper()->dataHoraBrParaSql($campos[$coluna]);
                    }
                } elseif ($campos[$coluna] != "") {
                    if (substr($campos[$coluna], 2, 1) == '/') {
                        if (strlen($campos[$coluna]) == 7) {
                            $campos[$coluna] = $this->helper()->dataFormatoOrigemDestino($campos[$coluna], 'm/Y', 'Y-m');
                        } else {
                            $campos[$coluna] = $this->helper()->dataFormatoBrParaSql($campos[$coluna]);
                        }
                    }
                }
            }

            //transforma campos de valores
            if (substr($coluna, 0, 3) == 'vlr') {
                $campos[$coluna] = $this->helper()->numeroFormatoBrParaSql($campos[$coluna]);
            }
        }

        return ($flgCamposCamelCase) ? $this->camelCaseArrayKeys($campos) : $this->snakeCaseArrayKeys($campos);
    }

    public function iniciarTransacao()
    {
        return $this->repository->iniciarTransacao();
    }

    public function commitarTransacao($transacao)
    {
        $this->repository->commitarTransacao($transacao);
    }

    public function rollBackTransacao($transacao)
    {
        $this->repository->rollBackTransacao($transacao);
    }

}
