<?php

$NAMESPACE$

use Prettus\Repository\Criteria\RequestCriteria;


class BaseRepository extends \Prettus\Repository\Eloquent\BaseRepository
{
    protected $fieldSearchable = [];

    /**
     * Specify Model class name
     *
     * @return string
     */
    public function model()
    {
        return '';
    }

    /**
     * Boot up the repository, pushing criteria
     */
    public function boot()
    {
        $this->pushCriteria(app(RequestCriteria::class));
    }

    /**
     * Retrieve all data of repository, paginated
     * Overrided to work on Lumen (by Alexandre Mota Monteiro)
     *
     * @param null   $limit
     * @param array  $columns
     * @param string $method
     *
     * @return mixed
     */
    public function paginate($limit = null, $columns = ['*'], $method = "paginate")
    {
        $this->applyCriteria();
        $this->applyScope();
        $limit = app('request')->get('perPage', is_null($limit) ? config('repository.pagination.limit', 15) : $limit);
        $results = $this->model->{$method}($limit, $columns);
        $results->appends(app('request')->query());
        $this->resetModel();

        return $this->parserResult($results);
    }

    /**
     * Delete multiple lines using the where clause
     * @param array $where ["ID_CAMPO"=>$campo] / [["OR","ID_CAMPO",$campo], ["AND","ID_CAMPO",$campo]]
     * @return mixed
     */
    public function deleteWithCondition( array $where)
    {

        $this->applyScope();

        $model = $this->model;
        foreach ($where as $field => $value){
            if(is_array($value)){
                list($condition, $field, $val) = $value;
                if(strtolower($condition) == 'or'){
                    $model = $model->orWhere($field, $val);
                }else{
                    $model = $model->where($field, $val);
                }
            }else{
                $model = $model->where($field,$value);
            }
        }
        $model = $model->delete();

        $this->resetModel();
        return $this->parserResult($model);
    }

}